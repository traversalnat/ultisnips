# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# lamda (one line, no dot)
snippet ldd "lamda anywhere" i
[${1}](${2}){${3}}
endsnippet

# auto iterator &
snippet iter:
for (auto &${1:i} : ${2:container}) {
	${3:std::cout << $1 << std::endl;}
}
endsnippet

snippet print_vector "print_vector" b
template<class T>
void print_vector(T t) {
#include <iterator>
	std::ostream_iterator<typename T::value_type> outite(std::cout, "${1}");
	std::copy(t.begin(), t.end(), outite);
	std::cout << std::endl;
}
endsnippet

snippet copyout
std::copy(${1}.begin(), $1.end(), std::ostream_iterator<${2}>(std::cout, "${3}"));
${0}
endsnippet

snippet copy
std::copy(${1:vector}.begin(), $1.end(), ${2:out});
endsnippet

snippet find "find anywhere" b
std::find(${1:vector}.begin(), $1.end(), ${2:value});
endsnippet

snippet findi "find anywhere" i
std::find(${1:vector}.begin(), $1.end(), ${2:value})
endsnippet

snippet gen
std::generate(${1:vector}.begin(), $1.end(), ${0});
endsnippet

snippet count_if
std::count_if(${1:vector}.begin(), $1.end(), ${2:func});
endsnippet

snippet itf "通用的 iter 函数" i
std::${1}(${2}.begin(), $2.end()${0});
endsnippet

snippet auf
auto ${1} = [${2}](${3}) {
	${4}
};
endsnippet

snippet class
class ${1} {
	public:
		$1();
		virtual ~$1();

	private:
		${0}
};
endsnippet

snippet template
template<class T>
${3:void} ${1:function}(T ${2:val}) {
	${0}
}
endsnippet

snippet template2
template<class T, class V>
${4:void} ${1:function}(T ${2:t}, V ${3:v}) {
	${0}
}
endsnippet

snippet erase
${1}.erase(std::remove($1.begin(), $1.end(), ${2}),
				$1.end());
endsnippet

snippet eraseif
${1}.erase(std::remove_if($1.begin(), $1.end(),
							[&](${2: int a}) { ${3:return true;} }),
				$1.end());
endsnippet

snippet safe_erase
template <class Sequence, class Iterator>
inline Iterator safe_erase(Sequence& s, Iterator iter) {
	if (iter == s.end()) return iter;
	return s.erase(iter);
}
endsnippet

snippet safe_erasev
template <class Sequence, class Val>
inline typename Sequence::iterator safe_erase(Sequence& s, Val v) {
	typename Sequence::iterator iter = std::find(s.begin(), s.end(), v);
	if (iter == s.end()) return iter;
	return s.erase(iter);
}
endsnippet
